// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: pkg/ginAuthRPC/proto/internalAuth.proto

package authProto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExternalAuthClient is the client API for ExternalAuth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalAuthClient interface {
	Permissions(ctx context.Context, in *CookieAccess, opts ...grpc.CallOption) (*UserInfo, error)
}

type externalAuthClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalAuthClient(cc grpc.ClientConnInterface) ExternalAuthClient {
	return &externalAuthClient{cc}
}

func (c *externalAuthClient) Permissions(ctx context.Context, in *CookieAccess, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/authProto.ExternalAuth/Permissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalAuthServer is the server API for ExternalAuth service.
// All implementations must embed UnimplementedExternalAuthServer
// for forward compatibility
type ExternalAuthServer interface {
	Permissions(context.Context, *CookieAccess) (*UserInfo, error)
	mustEmbedUnimplementedExternalAuthServer()
}

// UnimplementedExternalAuthServer must be embedded to have forward compatible implementations.
type UnimplementedExternalAuthServer struct {
}

func (UnimplementedExternalAuthServer) Permissions(context.Context, *CookieAccess) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Permissions not implemented")
}
func (UnimplementedExternalAuthServer) mustEmbedUnimplementedExternalAuthServer() {}

// UnsafeExternalAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalAuthServer will
// result in compilation errors.
type UnsafeExternalAuthServer interface {
	mustEmbedUnimplementedExternalAuthServer()
}

func RegisterExternalAuthServer(s grpc.ServiceRegistrar, srv ExternalAuthServer) {
	s.RegisterService(&ExternalAuth_ServiceDesc, srv)
}

func _ExternalAuth_Permissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CookieAccess)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalAuthServer).Permissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authProto.ExternalAuth/Permissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalAuthServer).Permissions(ctx, req.(*CookieAccess))
	}
	return interceptor(ctx, in, info, handler)
}

// ExternalAuth_ServiceDesc is the grpc.ServiceDesc for ExternalAuth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalAuth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authProto.ExternalAuth",
	HandlerType: (*ExternalAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Permissions",
			Handler:    _ExternalAuth_Permissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/ginAuthRPC/proto/internalAuth.proto",
}
